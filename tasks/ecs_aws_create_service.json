{
	"description": "Runs and maintains a desired number of tasks from a specified task definition. If the number of tasks running in a service drops below desiredCount, Amazon ECS spawns another copy of the task in the specified cluster. To update an existing service, see UpdateService. In addition to maintaining the desired count of tasks in your service, you can optionally run your service behind a load balancer. The load balancer distributes traffic across the tasks that are associated with the service. For more information, see Service Load Balancing in the Amazon Elastic Container Service Developer Guide. You can optionally specify a deployment configuration for your service. The deployment is triggered by changing properties, such as the task definition or the desired count of a service, with an UpdateService operation. If a service is using the ECS deployment controller, the minimum healthy percent represents a lower limit on the number of tasks in a service that must remain in the RUNNING state during a deployment, as a percentage of the desired number of tasks (rounded up to the nearest integer), and while any container instances are in the DRAINING state if the service contains tasks using the EC2 launch type. This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a desired number of four tasks and a minimum healthy percent of 50%, the scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. Tasks for services that do not use a load balancer are considered healthy if they are in the RUNNING state; tasks for services that do use a load balancer are considered healthy if they are in the RUNNING state and they are reported as healthy by the load balancer. The default value for minimum healthy percent is 100%. If a service is using the ECS deployment controller, the maximum percent parameter represents an upper limit on the number of tasks in a service that are allowed in the RUNNING or PENDING state during a deployment, as a percentage of the desired number of tasks (rounded down to the nearest integer), and while any container instances are in the DRAINING state if the service contains tasks using the EC2 launch type. This parameter enables you to define the deployment batch size. For example, if your service has a desired number of four tasks and a maximum percent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for maximum percent is 200%. If a service is using the CODE_DEPLOY deployment controller and tasks that use the EC2 launch type, the minimum healthy percent and maximum percent values are only used to define the lower and upper limit on the number of the tasks in the service that remain in the RUNNING state while the container instances are in the DRAINING state. If the tasks in the service use the Fargate launch type, the minimum healthy percent and maximum percent values are not used, although they are currently visible when describing your service. Tasks for services that do not use a load balancer are considered healthy if they are in the RUNNING state. Tasks for services that do use a load balancer are considered healthy if they are in the RUNNING state and the container instance they are hosted on is reported as healthy by the load balancer. The default value for a replica service for minimumHealthyPercent is 100%. The default value for a daemon service for minimumHealthyPercent is 0%. When the service scheduler launches new tasks, it determines task placement in your cluster using the following logic:   Determine which of the container instances in your cluster can support your service's task definition (for example, they have the required CPU, memory, ports, and container instance attributes).   By default, the service scheduler attempts to balance tasks across Availability Zones in this manner (although you can choose a different placement strategy) with the placementStrategy parameter):   Sort the valid container instances, giving priority to instances that have the fewest number of running tasks for this service in their respective Availability Zone. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.   Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.    ",
	"input_method": "stdin",
	"parameters":{
		
		
		
		
		    
			"deployment_configuration":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"scheduling_strategy":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"network_configuration":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"service_name":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"service_registries":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"platform_version":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"propagate_tags":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"role":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"client_token":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"cluster":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"desired_count":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"launch_type":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"load_balancers":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"tags":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"task_definition":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"deployment_controller":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"enable_ecs_managed_tags":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"health_check_grace_period_seconds":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"placement_constraints":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			,
		    
			"placement_strategy":{
			   "description": "",
			   "type": "Optional[String[1]]"
			}
			
	}
}